3. Что такое синхронизация потоков и зачем она нужна?

Ответ: Синхронизация потоков - это механизм, который позволяет координировать работу нескольких потоков в многопоточной программе.
Она нужна для предотвращения конфликтов доступа к общим ресурсам, таким как переменные или объекты,
которые могут быть изменены несколькими потоками одновременно. Без синхронизации возможны ошибки, такие как гонки данных или блокировки потоков,
которые могут привести к непредсказуемому поведению программы.

4. Какие способы синхронизации потоков вы знаете?

Ответ:

- Синхронизированные методы: методы, которые помечены ключевым словом synchronized, блокируют объект, на котором они вызываются, и предотвращают доступ к нему
из других потоков до тех пор, пока метод не завершится.

- Синхронизированные блоки: блоки кода, которые помечены ключевым словом synchronized,
блокируют объект, указанный в качестве аргумента,
и предотвращают доступ к нему из других потоков до тех пор, пока блок не завершится.

- Volatile переменные: переменные, которые помечены ключевым словом volatile,
гарантируют, что их значение будет видимо всем потокам, даже если они находятся в разных кэшах процессоров.

- Методы wait() и notify(): эти методы могут использоваться
для синхронизации потоков, которые работают с общими ресурсами.
Метод wait() приостанавливает выполнение потока до тех пор, пока другой поток не вызовет метод notify() на том же объекте.
Метод notify() возобновляет выполнение одного из потоков, ожидающих на том же объекте.

- Locks: объекты типа Lock могут использоваться для синхронизации потоков в более гибкой и точной форме, чем ключевое слово synchronized.
Они позволяют управлять блокировкой и разблокировкой объектов вручную.

5. Что такое deadlock (взаимная блокировка потоков)?

Ответ: Deadlock - это ситуация, когда два или более потока блокируют друг друга, ожидая освобождения ресурсов, которые заняты другими потоками.
Например, если поток A заблокировал ресурс X и пытается получить доступ к ресурсу Y, который заблокирован потоком B, а поток B заблокировал ресурс
Y и пытается получить доступ к ресурсу X, который заблокирован потоком A, то оба потока будут ожидать друг друга бесконечно, не выполняя никаких действий.
 Deadlock может возникнуть, если не правильно управлять блокировкой ресурсов в многопоточной программе.