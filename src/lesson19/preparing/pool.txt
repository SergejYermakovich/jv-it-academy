когда мы используем потоки - используем много ресурсов от компьютера
threadPool - новый способ создания потоков - но суть остается та же
у нас есть какое-то число потоков
они выполняют какое-то задание параллельно

метафора:
ExecutorService executorService = Executors.newFixedThreadPool(2); - у вас на фабрике 2 работника
https://stackoverflow.com/questions/18730290/what-is-the-difference-between-executorservice-submit-and-executorservice-execut




В Java существует два основных подхода к выполнению задач: синхронный и асинхронный.

1. Синхронность:
- Синхронный подход означает, что задачи выполняются последовательно и блокируют выполнение следующей задачи до завершения текущей.
- Это означает, что если одна задача занимает много времени на выполнение, это может привести к блокировке всего приложения.
- Примером синхронного подхода является использование метода join() для ожидания завершения потока выполнения.

2. Асинхронность:
- Асинхронный подход позволяет выполнять задачи параллельно, не блокируя основной поток выполнения.
- Это позволяет улучшить производительность приложения и делать более эффективное использование ресурсов.
- Примером асинхронного подхода в Java является использование интерфейса CompletableFuture для выполнения асинхронных операций.